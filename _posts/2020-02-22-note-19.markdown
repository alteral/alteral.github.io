---
title: "Waiting in Espresso tests"
date: 2020-02-22
tags:
  - Android
  - Espresso
  - Automation testing
preview: "/assets/images/note_19.png"
excerpt: null
related: true
toc: true
toc_label: Contents
---

{% include magic-under-title.html %}

# - What is ¬´Waiting¬ª?

Lifeguard from flaky tests.

# - What variety do we have?

Hmm, let me think‚Ä¶ ü§î

## We knew about *[Idling Resources](https://developer.android.com/training/testing/espresso/idling-resource)*.

*Pros:*
- It‚Äôs the most honest, fastest, and technically perfect way to wait;
- It doesn‚Äôt eat up the memory.

*Cons:*
- Sometimes it‚Äôs not a bit easier than writing production code;
- Sometimes we‚Äôll have to touch production code;
- Most cases will probably require the own *Idling Resources*.

## We heard about *[sleeps](https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep(long))*.

*Pros:*
- Kill me then.

*Cons:*
- We‚Äôll probably wait longer than we need;
- We‚Äôll perhaps wait less than we need.

## We were guessing about the hacky way of injecting *[UiAutomator](https://developer.android.com/training/testing/ui-testing/uiautomator-testing)*.

*Pros:*
- That‚Äôs something close to us since the time of *[Selenium](https://en.wikipedia.org/wiki/Selenium_(software))*.

*Cons:*
- We‚Äôll have to set an excess addiction;
- We‚Äôll be limited by *minSdkVersion = 18*;
- We‚Äôll have to play with weird *[UiObjects](https://developer.android.com/reference/androidx/test/uiautomator/UiObject2)*.

---

# - Go on, what about something else?

Okay‚Ä¶ üòè

## Let‚Äôs try one hacky way using *Espresso*.

At first we have to extend ViewInteration class by adding new methods:
- *isDisplayed(): Boolean*
- *doesNotExist(): Boolean*
- *waitForAppear(millis: Long): ViewInteraction*
- *waitForDisappear(millis: Long): ViewInteraction*

```kotlin
fun ViewInteraction.isDisplayed(): Boolean {
    try {
        this.check(ViewAssertions.matches(ViewMatchers.isDisplayed()))
    } catch (ignored: NoMatchingViewException) {
        return false
    }
    return true
}

fun ViewInteraction.doesNotExist(): Boolean {
    try {
        this.check(ViewAssertions.doesNotExist())
    } catch (ignored: AssertionError) {
        return false
    }
    return true
}

fun ViewInteraction.waitForAppear(millis: Long = 5000): ViewInteraction {
    val timeout = System.currentTimeMillis() + millis
    while (System.currentTimeMillis() < timeout) {
        if (this.isDisplayed()) { break }
    }
    return this
}

fun ViewInteraction.waitForDisappear(millis: Long = 5000): ViewInteraction {
    val timeout = System.currentTimeMillis() + millis
    while (System.currentTimeMillis() < timeout) {
        if (this.doesNotExist()) { break }
    }
    return this
}
```

Then we can try to use it in the tests:

```kotlin
@Test
fun whenViewWillAppear() {
    val viewMatcher = ViewMatchers.withId(R.id.sample_view_id)
    Espresso.onView(viewMatcher)
        .waitForAppear()
        .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))
}

@Test
fun whenViewWillDisappear() {
    val viewMatcher = ViewMatchers.withId(R.id.sample_view_id)
    Espresso.onView(viewMatcher)
        .waitForDisappear()
        .check(ViewAssertions.doesNotExist())
}
```

*Pros:*
- Nothing is easier than use it for all the cases;
- We‚Äôre able to control the waiting timeout for each case.

*Cons:*
- *Logcat* will be littered;
- After all, it a bit eats up the memory (comparing with *Idling Resources*).

# - Conclusion?

Yeah, waits are the delicate matter:
- Follow the deadlines, needs, requirements and sanity;
- Do whatever you want (using Espresso, of course üßê);
- Enjoy! üòâ
